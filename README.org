#+TITLE: Gurf, a (G)erbil/Gambit Scheme S(urf) Browser

I want a browser with a REPL that I can hack in Meta-Scheme. It has to be
useful. It has to be hackable. *Gurf* for the win!

* Installation

This is still in the hackety hack alpha, but soon to be very useful :). It's
currently for development use on an uptodate gerbil.

First off we need to install the following headers and libraries.

#+begin_src scheme
(def libs
  "x11 glib-2.0 gdk-3.0 atk gcr-3 webkit2gtk-4.0 webkit2gtk-web-extension-4.0 gio-2.0")
#+end_src

Then this should "just work".

#+begin_src shell
gxpkg install github.com/drewc/gurf
#+end_src

Binaries soon to come!

* Usage

This opens a browser window.

#+begin_src scheme
;;;; Gerbil v0.16-243-g87c6279b on Gambit v4.9.3-1540-gee1795ec
(import :drewc/gurf/surf)
(surf "http://google.ca")
#+end_src

* The Current Implemetation

This is so simple that it's a brilliant start! It's this easy to get a working browser? The future looks bright.

#+begin_src shell
~/me/src/gurf
gxpkg link github.com/drewc/gurf $(pwd)
#+end_src

#+begin_src scheme :tangle surf.ss
(export #t setup surf surf-clients newclient showview current-surf-driver start-surfing! gtk_surf_iteration
        Client Client-title)
(import :std/foreign
        :gerbil/gambit/foreign
        :gerbil/gambit/threads)

(def (surf-driver!)
  (def _sleep 0.00001)
  (def sleep 0.00001)
  (def (sleepy) (thread-sleep!
                 (max sleep 0.001))
    (+ sleep 0.0000001))
  (let lp ()
    (def events? (gtk_surf_iteration))
    (if events?
      (set! sleep _sleep)
      (sleepy))
    (lp)))

(def current-surf-driver (make-parameter #f))
(def (start-surfing!)
  (cond ((current-surf-driver) => values)
        (else
         (setup)
         (let (drv (spawn surf-driver!))
                (current-surf-driver drv)
                drv))))

(def surf-clients clients)

(def (surf (uri "about:blank") (rclient (surf-clients)))
  (start-surfing!)
  (let (client (newclient rclient))
    (showview client)
    (loaduri client uri)
    (updatetitle client)
    client))


(begin-ffi (setup newclient clients loaduri showview  gtk_surf_iteration updatetitle Client Client-title
                 abc abc-b)
  (c-declare "#include \"surf/surf.c\"")
  (define-c-lambda setup () void "setup")
  (define-c-struct Client ((title . char-string) (next . Client*)))
  (define-c-lambda newclient (Client*) Client* "newclient")
  (define-c-lambda clients () Client* "___return(clients);")
  (define-c-lambda loaduri (Client* char-string) void
    "Arg arg; arg.v = ___arg2 ; loaduri(___arg1, &arg); ")
  (define-c-lambda updatetitle (Client*) void "updatetitle")
  (define-c-lambda showview (Client*) void "showview(NULL, ___arg1);")
  (define-c-lambda testSurf () int "___return(1);")
  (define-c-lambda gtk_surf_iteration
    () bool "gboolean res = g_main_context_pending(NULL);
    while (g_main_context_pending(NULL)) {
      g_main_context_iteration(NULL, FALSE);
   }; ___return(res);"))

#+end_src

* Surf Branch and Subtree

#+begin_quote
surf is a simple web browser based on WebKit2/GTK+. It is able to display
websites and follow links. It supports the XEmbed protocol which makes it
possible to embed it in another application. Furthermore, one can point surf to
another URI by setting its XProperties.
-- https://surf.suckless.org
#+end_quote

Surf is a wonderful barebones browser that is the ideal starting point.

We want to start with it and go from there.

#+begin_src shell
cd ~/me/src/gurf
git remote add surf https://git.suckless.org/surf
git fetch surf
git branch surf --track surf/surf-webkit2
git subtree add --prefix=bootstrap/drewc/gurf/surf ./ surf

mkdir doc
cd doc
wget http://www.troubleshooters.com/linux/surf.htm
pandoc -o Surf.org surf.htm
rm surf.htm
#+end_src
