#+TITLE: Surf, the suckless browser

* New Window

Surf ships with a fork and relaunch of itself when a new window is opened.

When using it from the REPL such things do not exist.

So we'll use our own.

#+begin_src c
void
newsurf(Client *rc, const Arg *a)
{
  Client* c = newclient(rc);
  
  showview(NULL, c);
  loaduri(c, a);
  updatetitle(c);
}
#+end_src

Now rename ~newwindow~ to ~spawnnewwindow~ and redo ~newindow~.

#+begin_src c
void
newwindow(Client *c, const Arg *a, int noembed)
{
	if (argv0 != NULL) {
		spawnnewwindow(c, a, noembed);
	} else {
		newsurf(c, a);
	}
}
#+end_src


* The FFI to ~surf.c~

This is so simple that it's a brilliant start! It's this easy to get a working browser? The future looks bright.

#+begin_src shell
~/me/src/gurf
gxpkg link github.com/drewc/gurf $(pwd)
gxpkg build github.com/drewc/gurf
#+end_src

#+begin_src scheme :tangle surf.ss
(export #t setup surf surf-clients newclient showview current-surf-driver start-surfing! gtk_surf_iteration
        Client Client-title)
(import :std/foreign
        :gerbil/gambit/foreign
        :gerbil/gambit/threads)

(def (surf-driver!)
  (def _sleep 0.00001)
  (def sleep 0.00001)
  (def max-sleep 0.1)
  (def (sleepy)
    (thread-sleep! (max sleep max-sleep))
    (when (< sleep max-sleep)
      (+ sleep 0.0000001)))
  (let lp ()
    (def events? (gtk_surf_iteration))
    (if events?
      (set! sleep _sleep)
      (sleepy))
    (lp)))

(def current-surf-driver (make-parameter #f))
(def (start-surfing!)
  (cond ((current-surf-driver) => values)
        (else
         (setup)
         (let (drv (spawn surf-driver!))
                (current-surf-driver drv)
                drv))))

(def surf-clients clients)

(def (surf (uri "about:blank") (rclient (surf-clients)))
  (start-surfing!)
  (let (client (newclient rclient))
    (showview client)
    (loaduri client uri)
    (updatetitle client)
    client))


(begin-ffi (setup newclient clients loaduri showview  gtk_surf_iteration updatetitle Client Client-title
                 abc abc-b)
  (c-declare "#include \"surf/surf.c\"")
  (define-c-lambda setup () void "setup")
  (define-c-struct Client ((title . char-string) (next . Client-borrowed-ptr*)))
  (define-c-lambda newclient (Client-borrowed-ptr*) Client-borrowed-ptr* "newclient")
  (define-c-lambda clients () Client-borrowed-ptr* "___return(clients);")
  (define-c-lambda loaduri (Client-borrowed-ptr* char-string) void
    "Arg arg; arg.v = ___arg2 ; loaduri(___arg1, &arg); ")
  (define-c-lambda updatetitle (Client-borrowed-ptr*) void "updatetitle")
  (define-c-lambda showview (Client-borrowed-ptr*) void "showview(NULL, ___arg1);")
  (define-c-lambda testSurf () int "___return(1);")
  (define-c-lambda gtk_surf_iteration
    () bool "gboolean res = g_main_context_pending(NULL);
    while (g_main_context_pending(NULL)) {
      g_main_context_iteration(NULL, FALSE);
   }; ___return(res);"))

#+end_src

* Surf Branch and Subtree

#+begin_quote
surf is a simple web browser based on WebKit2/GTK+. It is able to display
websites and follow links. It supports the XEmbed protocol which makes it
possible to embed it in another application. Furthermore, one can point surf to
another URI by setting its XProperties.
-- https://surf.suckless.org
#+end_quote

Surf is a wonderful barebones browser that is the ideal starting point.

We want to start with it and go from there.

#+begin_src shell
cd ~/me/src/gurf
git remote add surf https://git.suckless.org/surf
git fetch surf
git branch surf --track surf/surf-webkit2
git subtree add --prefix=bootstrap/drewc/gurf/surf ./ surf

mkdir doc
cd doc
wget http://www.troubleshooters.com/linux/surf.htm
pandoc -o Surf.org surf.htm
rm surf.htm
#+end_src
